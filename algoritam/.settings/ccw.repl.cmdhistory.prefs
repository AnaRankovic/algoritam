cmdhistory=["(start-server)" "(create-table)" "(Math/pow 2 4)" "(sqrt 4)" "(Math/sqrt 4)" "(defn Euclidean [x1 x2 y1 y2]\\n  (Math/sqrt( + (Math/pow 2 (- x1 x2)) (Math/pow 2 (- y1 y2)) )\\n  ))" "(Euclidean 5 4 4 1)" "(/ 1 2)" "(\\\\ 1 2)" "(Euclidean 5 4 4 1)" "(vrati-sve \\"Lisa Rose\\")" "(vrati-sve \\"Lisa \\")" "(vrati-sve \\"Claudia Puig\\")" "(vrati-sve \\"Mick LaSalle\\")" "(vrati-sve \\"Toby\\")" "(vrati-sve \\"Mick\\")" "(vrati-Just_My_Luck \\"Mick LaSalle\\")" "(vrati-Superman_Returns \\"Mick LaSalle\\")" "(vrati-Lady_in_the_Water \\"Mick LaSalle\\")" "(vrati-Snakes_on_a_Plane \\"Mick LaSalle\\")" "(vrati-You_Me_and_Dupree \\"Mick LaSalle\\")" "(vrati-The_Night_Listener \\"Mick LaSalle\\")" "(+ 1 (vrati-Just_My_Luck \\"Mick LaSalle\\"))" "(get (vrati-Just_My_Luck \\"Mick LaSalle\\"))" "(get (vrati-Just_My_Luck \\"Mick LaSalle\\") \:\:the_night_listener)" "(get (vrati-Just_My_Luck \\"Mick LaSalle\\") \:the_night_listener)" "(vrati-Just_My_Luck \\"Mick LaSalle\\")" "(get (vrati-Just_My_Luck \\"Mick LaSalle\\") \:just_my_luck)" "(+ 1 (get (vrati-Just_My_Luck \\"Mick LaSalle\\") \:just_my_luck))" "(vrati-Just_My_Luck \\"Toby\\")" "(vrati-Just_My_Luck \\"Gene Seymour\\")" "(+ 1 (vrati-Just_My_Luck \\"Gene Seymour\\"))" "(+ 1 (vrati-Just_My_Luck \\"Gene Seymou\\"))" "(+ 1 (vrati-Just_My_Luck \\"Gene Seymour\\"))" "(vrati-Just_My_Luck \\"Toby\\")" "(vrati-Superman_Returns \\"Toby\\")" "(vrati-Lady_in_the_Water \\"Toby\\")" "(vrati-Snakes_on_a_Plane \\"Toby\\")" "(vrati-You_Me_and_Dupree \\"Toby\\")" "(vrati-The_Night_Listener \\"Toby\\")" "(vrati-Superman_Returns \\"sd\\")" "(def suma 0)" "subs" "suma" "(suma)" "(+ 1 suma)" "suma" "(or true true true)" "(or 1 2)" "(or 1 1 )" "(or 2 3)" "(or true true)" "(or true false)" "(or false false)" " (if (< 2 100) \\"yes\\" \\"no\\")" " (if (< 200 100) \\"yes\\" \\"no\\")" " (if (< number 100) 0 1)" " (if-let (< number 100) \\"yes\\" \\"no\\")" "(cond\\r\\n    (< 1 0) \\"negative\\"\\r\\n    \:else \\"zero\\")" "(cond\\r\\n       (< 1 0) \\"negative\\"\\r\\n       \:else 0)" "(cond\\r\\n       (< -1 0) 1\\r\\n       \:else 0)" "(suma)" "suma" "(euklid \\"Gene Seymour\\" \\"Toby\\")" "(euklid \\"Gene Seymour\\" \\"Lisa Rose\\")" "(euklid \\"Lisa Rose\\" \\"Toby\\")" "(euklid \\"Lisa Rose\\" \\"Mick LaSalle\\")" "(def my-atom (atom 0))" "(swap\! my-atom (fn [n] (* (+ n n) 2)))" "(swap\! my-atom 3)" "(swap\! atom (+ 2 2))" "(defn cetir\\n  (+ 2 2))" "(defn cetir []\\r\\n     (+ 2 2))" "cetir" "(cetir)" "(swap\! my-atom cetir)" "(swap\! my-atom (cetir))" "(swap\! my-atom \#(cetir))" "(swap\! my-atom inc)" "(swap\! my-atom (fn [n] (* (+ n n) 2)))" "(defn eee [x1 x2]\\r\\n     (Math/pow 2 (- x1 x2)))" "(eee 4 6)" "(Math/pow 2 3)" "(Math/pow 3 2)" "(defn eee [x1 x2]\\r\\n     (Math/pow (- x1 x2) 2))" "(eee 4 6)" "(eee 6 4)" "(eee 7 2)" "(@my-atom)" "@my-atom" "(swap\! my-atom (eee 6 4))" "(swap\! my-atom (Math/pow 2 2))" "(swap\! my-atom (fn [n] \\n                 (* (+ n n) 2))\\n       )" "(fn [n] \\r\\n                    (* (+ n n) 2))" "(fn [n] (* (+ n n) 2))" "(print (fn [n] (* (+ n n) 2)))" "(reset\! my-atom 0)" "@my-atom" "(swap\! my-atom (fn [n] (* (+ n n) 2)))" "(swap\! my-atom inc)" "(swap\! my-atom (fn [n] (* (+ n n) 2)))" "(swap\! my-atom (fn [n] (* (Math/pow 2 2) 2)))" "(swap\! my-atom (fn [n] (Math/pow 2 2)))" "(swap\! my-atom (fn [n] (* (Math/pow 2 2) 2)))" "(defn a [n] (* (+ n n) 2))" "(a 2)" "(reset\! my-atom 0)" "(swap\! my-atom (a 3))" "(euklid \\"Mick LaSalle\\" \\"Toby\\")" "(euklid \\"Mick LaSalle\\" \\"Jack Matthews\\")" "(def my-atom (atom 0.0))" "@my-atom" "(swap\! my-atom 3)" "(defn eee [x1 x2]\\r\\n     (Math/pow (- x1 x2) 2))" "(eee 4 6 )" "(swap\! my-atom (eee 4 6))" "@my-atom" "(swap\! my-atom (fn [n] (* (+ n n) 2)))" "(swap\! my-atom inc)" "(swap\! my-atom (fn [n] (* (+ n n) 2)))" "(reset\! my-atom 1)" "(swap\! my-atom (fn [n] (+ n (Math/pow (- x1 x2) 2)\\n                 )))" "(swap\! my-atom (fn [n] (+ n (Math/pow 3 2)\\r\\n                    )))" "(reset\! my-atom 0)" "(swap\! my-atom (fn [n] (+ n (Math/pow 3 2)\\r\\n                       )))" "(euklid \\"Lisa Rose\\" \\"Toby\\")" "(eee 5 2)" "(cond\\n  (\= 1 1) 0\\n  \:else 2)" "(cond\\r\\n     (\= 1 1)\\r\\n     \:else 2)" "(def my-atom (atom 0))" "(swap\! my-atom (fn [n] (+ n (Math/pow 4 2))))" "(swap\! my-atom (fn [n] (+ n (Math/pow 0 2))))" "(swap\! my-atom (fn [n] (+ n (Math/pow 4 2))))" "(swap\! my-atom (fn [n] (+ n (Math/pow 0 2))))" "(sumaKvadrata 5 8)" "(sumaKvadrata 2 6)" "(if (< 1 100) 1.0 0.0)" "(defn pos-neg-or-zero [n1 n2]\\r\\n  (cond\\r\\n    (> n1 0) (sumaKvadrata n1 n2)\\r\\n    (> n2 0) (sumaKvadrata n1 n2)\\r\\n    \:else (sumaKvadrata 0 0)))" "@suma" "(reset\! suma 0)" "(pos-neg-or-zero 2 3)" "(reset\! suma 0)" "(sumaKvadrata 2 5)" "(reset\! suma 0)" "(defn sumahej []\\n  (sumaKvadrata 4 3)\\n  (sumaKvadrata 1 3)\\n  (sumaKvadrata 6 2)\\n  )" "(sumahej)" "(sumaKvadrata nil 2)" "(defn sumaKvadrata [x1 x2]\\r\\n     (swap\! suma (fn [n] (+ n (Math/pow (- x1 x2) 2)))))" "(sumaKvadrata 2 6)" "(reset\! suma 0)" "(sumaKvadrata 2 6)" "(reset\! suma 0)" "(defn sumaKvadrata [x1 x2]\\r\\n  (if (and (not\= nil x1) (not\= nil x2))      \\n  (swap\! suma (fn [n] (+ n (Math/pow (- x1 x2) 2))))\\n ))" "@suma" "(sumaKvadrata nil 3)" "(sumaKvadrata 3 6)" "(sumaKvadrata 3 4)" "(sumaKvadrata (algoritam.models.db/vrati-Lady_in_the_Water \\"Toby\\") (algoritam.models.db/vrati-Lady_in_the_Water \\"Lisa Rose\\"))" "(sumaKvadrata (algoritam.models.db/vrati-Lady_in_the_Water \\"Gene Seymour\\") (algoritam.models.db/vrati-Lady_in_the_Water \\"Lisa Rose\\"))" "(reset\! suma 0)" "(sumaKvadrata (algoritam.models.db/vrati-Lady_in_the_Water \\"Gene Seymour\\") (algoritam.models.db/vrati-Lady_in_the_Water \\"Lisa Rose\\"))" "(sumaKvadrata (algoritam.models.db/vrati-Lady_in_the_Water \\"Toby\\") (algoritam.models.db/vrati-Lady_in_the_Water \\"Lisa Rose\\"))" "(sumaKvadrata (algoritam.models.db/vrati-Lady_in_the_Water \\"Gene Seymour\\") (algoritam.models.db/vrati-Lady_in_the_Water \\"Lisa Rose\\"))" "(sumaKvadrata (algoritam.models.db/vrati-Lady_in_the_Water \\"Toby\\") (algoritam.models.db/vrati-Lady_in_the_Water \\"Lisa Rose\\"))" "(sumaKvadrata (algoritam.models.db/vrati-Lady_in_the_Water \\"Gene Seymour\\") (algoritam.models.db/vrati-Lady_in_the_Water \\"Lisa Rose\\"))" "(euklid \\"Gene Seymour\\" \\"Michael Phillips\\")" "(def suma (atom 0.0))" "(Math/sqrt suma)" "(Math/sqrt @suma)" "(euklid \\"Gene Seymour\\" \\"Michael Phillips\\")" "(euklid \\"Lisa Rose\\" \\"Gene Seymour\\")" "(euklid \\"Gene Seymour\\" \\"Michael Phillips\\")" "(euklid \\"Michael Phillips\\" \\"Gene Seymour\\")" "(euklid \\"Gene Seymour\\" \\"Lisa Rose\\")" "(+ 1 (euklid \\"Gene Seymour\\" \\"Lisa Rose\\"))" "(n \\"Lisa Rose\\" \\"Toby\\")" "(euklid \\"Lisa Rose\\" \\"Toby\\")" "(euklid \\"Lisa Rose\\" \\"Gene Seymour\\")" "(euklid \\"Lisa Rose\\" \\"Toby\\")" "(euklid \\"Lisa Rose\\" \\"Gene Seymour\\")" "(euklid \\"Lisa Rose\\" \\"Michael Phillips\\")" "(euklid \\"Lisa Rose\\" \\"Toby\\")" "(euklid \\"Lisa Rose\\" \\"Claudia Puig\\")" "(euklid \\"Lisa Rose\\" \\"Toby\\")" "(sumaZajednickihOcena \\"Toby\\" \\"Lisa Rose\\")" "(sumaZajednickihOcena \\"Jack Matthews\\" \\"Lisa Rose\\")" "(sumaZajednickihOcena \\"Lisa Rose\\" \\"Michael Phillips\\")" "(def n (atom 0))" "(defn brojZajednickihOcena [x1 x2]\\r\\n  (if (and (not\= nil x1) (not\= nil x2))      \\r\\n    (swap\! n inc)))" "(brojZajednickihOcena (algoritam.models.db/vrati-Lady_in_the_Water kriticar1) (algoritam.models.db/vrati-Lady_in_the_Water kriticar2))" "(brojZajednickihOcena (algoritam.models.db/vrati-Lady_in_the_Water \\"Lisa Rose\\") (algoritam.models.db/vrati-Lady_in_the_Water \\"Toby\\"))" "(brojZajednickihOcena (algoritam.models.db/vrati-Lady_in_the_Water \\"Lisa Rose\\") (algoritam.models.db/vrati-Lady_in_the_Water \\"Gene Seymour\\"))" "(brojZajednickihOcena (algoritam.models.db/vrati-Lady_in_the_Water \\"Lisa Rose\\") (algoritam.models.db/vrati-Lady_in_the_Water \\"Toby\\"))" "@n" "(swap\! @n 0)" "(def suma (atom 0.0))" "(defn sumaKvadrataRazlike [x1 x2]\\r\\n  (if (and (not\= nil x1) (not\= nil x2))      \\r\\n     (swap\! suma (fn [n] (+ n (Math/pow (- x1 x2) 2))))))" "(sumaKvadrataRazlike (algoritam.models.db/vrati-Lady_in_the_Water \\"Toby\\") (algoritam.models.db/vrati-Lady_in_the_Water \\"Mick LaSalle\\"))" "@suma" "(sumaKvadrataRazlike (algoritam.models.db/vrati-Lady_in_the_Water \\"Jack Matthews\\") (algoritam.models.db/vrati-Lady_in_the_Water \\"Mick LaSalle\\"))" "@subs" "@suma" "(euklid \\"Gene Seymour\\" \\"Lisa Rose\\")" "@suma" "(reset\! suma 0)" "(sumaKvadrataRazlike \\"Toby\\" \\" Jack Matthews\\")" "(sumaKvadrataRazlike (algoritam.models.db/vrati-Lady_in_the_Water \\"Jack Matthews\\") (algoritam.models.db/vrati-Lady_in_the_Water \\"Toby\\"))" "@suma" "(sumaKvadrataRazlike (algoritam.models.db/vrati-Lady_in_the_Water \\"Jack Matthews\\") (algoritam.models.db/vrati-Lady_in_the_Water \\"Michael Phillips\\"))" "@suma" "(sumaKvadrataRazlike (algoritam.models.db/vrati-Lady_in_the_Water \\"Jack Matthews\\") (algoritam.models.db/vrati-Lady_in_the_Water \\"Michael Phillips\\"))" "(algoritam.models.db/vrati-Lady_in_the_Water \\"Jack Matthews\\")" "(algoritam.models.db/vrati-Lady_in_the_Water \\"Michael Phillips\\")" "(algoritam.models.db/vrati-Lady_in_the_Water \\"Jack Matthews\\")" "@suma" "(sumaKvadrataRazlike (algoritam.models.db/vrati-Lady_in_the_Water \\"Jack Matthews\\") (algoritam.models.db/vrati-Lady_in_the_Water \\"Michael Phillips\\"))" "(algoritam.models.db/vrati-Lady_in_the_Water \\"Toby\\")" "(algoritam.models.db/vrati-Lady_in_the_Water \\"Jack Matthews\\")" "(brojZajednickihOcena (algoritam.models.db/vrati-Lady_in_the_Water \\"Toby\\") (algoritam.models.db/vrati-Lady_in_the_Water \\"Jack Matthews\\"))" "(reset\! n 0)" "(brojZajednickihOcena (algoritam.models.db/vrati-Lady_in_the_Water \\"Toby\\") (algoritam.models.db/vrati-Lady_in_the_Water \\"Jack Matthews\\"))" "(brojZajednickihOcena (algoritam.models.db/vrati-Lady_in_the_Water \\"Jack Matthews\\") (algoritam.models.db/vrati-Lady_in_the_Water \\"Toby\\"))" "@brojZajednickihOcena" "@n" "(brojZajednickihOcena (algoritam.models.db/vrati-Lady_in_the_Water \\"Jack Matthews\\") (algoritam.models.db/vrati-Lady_in_the_Water \\"Toby\\"))" "@n" "(brojZajednickihOcena (algoritam.models.db/vrati-Lady_in_the_Water \\"Jack Matthews\\") (algoritam.models.db/vrati-Lady_in_the_Water \\"Lisa Rose\\"))" "(brojZajednickihOcena (algoritam.models.db/vrati-Lady_in_the_Water \\"Jack Matthews\\") (algoritam.models.db/vrati-Lady_in_the_Water \\"Toby\\"))" "@n" "(brojZajednickihOcena (algoritam.models.db/vrati-Lady_in_the_Water \\"Jack Matthews\\") (algoritam.models.db/vrati-Lady_in_the_Water \\"Lisa Rose\\"))" "(brojZajednickihOcena (algoritam.models.db/vrati-Lady_in_the_Water \\"Jack Matthews\\") (algoritam.models.db/vrati-Lady_in_the_Water \\"Toby\\"))" "@n" "(sumaKvadrataRazlike (algoritam.models.db/vrati-Lady_in_the_Water \\"Jack Matthews\\") (algoritam.models.db/vrati-Lady_in_the_Water \\"Michael Phillips\\"))" "@subs" "@suma" "(reset\! suma 0)" "(sumaKvadrataRazlike (algoritam.models.db/vrati-Lady_in_the_Water \\"Jack Matthews\\") (algoritam.models.db/vrati-Lady_in_the_Water \\"Michael Phillips\\"))" "(sumaKvadrataRazlike (algoritam.models.db/vrati-Lady_in_the_Water \\"Jack Matthews\\") (algoritam.models.db/vrati-Lady_in_the_Water \\"Toby\\"))" "(sumaKvadrataRazlike (algoritam.models.db/vrati-Lady_in_the_Water \\"Jack Matthews\\") (algoritam.models.db/vrati-Lady_in_the_Water \\"Michael Phillips\\"))" "(sumaZajednickihOcena \\"Lisa Rose\\" \\"Toby\\")" "(sumaZajednickihOcena \\"Lisa Rose\\" \\"Michael Phillips\\")" "(def s1 (atom 0))" "(defn suma1 [x1]\\r\\n  (if (not\= x1 nil)\\r\\n    (swap\! s1 (fn [n] (+ n x1)))))" "(suma1 444)" "@s1" "(suma1 26)" "(@s1)" "@s1" "(suma1 1.3)" "(suma (algoritam.models.db/vrati-Lady_in_the_Water \\"Toby\\"))" "(algoritam.models.db/vrati-Lady_in_the_Water \\"Toby\\")" "(algoritam.models.db/vrati-Lady_in_the_Water \\"Lisa Rose\\")" "(suma (algoritam.models.db/vrati-Lady_in_the_Water \\"Lisa Rose\\"))" "(suma 2)" "(suma (algoritam.models.db/vrati-Lady_in_the_Water \\"Lisa Rose\\"))" "(sumaOcenaZaJednogKriticara \\"Toby\\")" "(sumaKvadrataOcenaZaJednogKriticara \\"Toby\\")" "(Math/pow x 2)" "(Math/pow 4 2)" "(def s2 (atom 0))" "(defn sumaKvadrata [x]\\r\\n  (if (not\= x nil)\\r\\n    (swap\! s1 (fn [n] (+ n (Math/pow x 2))))))" "(sumaKvadrata (algoritam.models.db/vrati-Lady_in_the_Water \\"Lisa Rose\\"))" "@s2" "(sumaKvadrata 2)" "(sumaKvadrata 3)" "(sumaKvadrata nil?)" "(sumaKvadrata nil)" "@sumaKvadrata" "(sumaKvadrata 1)" "(sumaKvadrataOcenaZaJednogKriticara \\"Toby\\")" "(* 2 4)" "(def s3 (atom 0))" "(defn sumaProizvoda [x1 x2]\\r\\n  (if (and (not\= nil x1) (not\= nil x2))      \\r\\n    (swap\! n (fn [n] (+ n (* x1 x2))))))" "(sumaProizvoda 2 3)" "(sumaProizvoda 4 5)" "(sumaProizvodaOcena \\"Toby\\" \\"Jack Matthews\\")" "(sumaProizvodaOcena 2 3)" "(sumaProizvoda 2 3)" "@s3" "(sumaProizvodaOcena \\"Toby\\" \\"Jack Matthews\\")" "(num \\"Jack Matthews\\" \\"Toby\\")" "(sumaProizvodaOcena \\"Jack Matthews\\" \\"Toby\\")" "(* (sumaOcenaZaJednogKriticara \\"Jack Matthews\\") (sumaOcenaZaJednogKriticara \\"Toby\\"))" "(sumaZajednickihOcena \\"Jack Matthews\\" \\"Toby\\")" "(/ 2604.0 6)" "(/ 83.0 434.0)" "(- 83.0 434.0)" "(sumaOcenaZaJednogKriticara \\"Jack Matthews\\")" "(sumaOcenaZaJednogKriticara \\"Toby\\")" "(sumaZajednickihOcena \\"Jack Matthews\\" \\"Toby\\")" "(sumaOcenaZaJednogKriticara \\"Jack Matthews\\")" "(sumaOcenaZaJednogKriticara \\"Toby\\")" "(sumaKvadrataOcenaZaJednogKriticara \\"Jack Matthews\\" \\"Toby\\")" "(sumaProizvodaOcena \\"Jack Matthews\\" \\"Toby\\")" "(sumaZajednickihOcena \\"Jack Matthews\\" \\"Toby\\")" "(sumaOcenaZaJednogKriticara \\"Jack Matthews\\")" "(sumaOcenaZaJednogKriticara \\"Toby\\")" "(sumaProizvodaOcena \\"Jack Matthews\\" \\"Toby\\")" "(* (sumaOcenaZaJednogKriticara \\"Jack Matthews\\") (sumaOcenaZaJednogKriticara \\"Toby\\"))" "(- (sumaProizvodaOcena \\"Jack Matthews\\" \\"Toby\\") (/ (* (sumaOcenaZaJednogKriticara \\"Jack Matthews\\") (sumaOcenaZaJednogKriticara \\"Toby\\")) (sumaZajednickihOcena \\"Jack Matthews\\" \\"Toby\\")))" "(num \\"Jack Matthews\\" \\"Toby\\")" "(Math/sqrt 9)" "(Math/pow 3 2)" "(den \\"Jack Matthews\\" \\"Toby\\")" "(sumaZajednickihOcena \\"Jack Matthews\\" \\"Toby\\")" "(den \\"Jack Matthews\\" \\"Toby\\")" "(sumaZajednickihOcena \\"Jack Matthews\\" \\"Toby\\")" "(den \\"Jack Matthews\\" \\"Toby\\")" "(Math/sqrt (* (- (sumaKvadrataOcenaZaJednogKriticara [kriticar1]) (/ (Math/pow (sumaOcenaZaJednogKriticara [kriticar1]) 2) (sumaZajednickihOcena [kriticar1 kriticar2])))\\r\\n                (- (sumaKvadrataOcenaZaJednogKriticara [kriticar2]) (/ (Math/pow (sumaOcenaZaJednogKriticara [kriticar2]) 2) (sumaZajednickihOcena [kriticar1 kriticar2])))))" "(- (sumaKvadrataOcenaZaJednogKriticara [\\"Jack Matthews\\"]) (/ (Math/pow (sumaOcenaZaJednogKriticara [\\"Jack Matthews\\"]) 2) \\n                                                             (sumaZajednickihOcena [\\"Jack Matthews\\" \\"Toby\\"])))" "(sumaZajednickihOcena [\\"Jack Matthews\\" \\"Toby\\"])" "(den \\"Jack Matthews\\" \\"Toby\\")" "(/ (num \\"Jack Matthews\\" \\"Toby\\") (den \\"Jack Matthews\\" \\"Toby\\"))" "(/ (num \\"Jack Matthews\\" \\"Lisa Rose\\") (den \\"Jack Matthews\\" \\"Lisa Rose\\"))" "(/ (num \\"Toby\\" \\"Jack Matthews\\") (den \\"Toby\\" \\"Jack Matthews\\"))" "(/ (num \\"Gene Seymour\\" \\"Lisa Rose\\") (den \\"Gene Seymour\\" \\"Lisa Rose\\"))" "(/ (num \\"Lisa Rose\\" \\"Gene Seymour\\") (den \\"Lisa Rose\\" \\"Gene Seymour\\"))" "(if (\= 0 0)\\n  0\\n  1\\n  )" "(if (\= 10 0)\\r\\n     0\\r\\n     1\\r\\n     )" "(\u03C1 \\"Lisa Rose\\" \\"Toby\\")" "(\u03C1 \\"Lisa Rose\\" \\"Gene Seymour\\")" "(sumaZajednickihOcena \\"Lisa Rose\\" \\"Toby\\")" "(sumaZajednickihOcena \\"Lisa Rose\\" \\"Gene Seymour\\")" "(sumaOcenaZaJednogKriticara \\"Lisa Rose\\")" "(sumaOcenaZaJednogKriticara \\"Toby\\")" "(defn vrati-Lady_in_the_Water [Name]\\r\\n  \\"Select user with given name\\"\\r\\n  (sql/with-connection\\r\\n  db\\r\\n   (get (sql/with-query-results res\\r\\n    [\\"select Lady_in_the_Water from film_critics where Name \= ?\\" Name] (first res)) \:lady_in_the_water)))" "(if (1 < 2)\\n  (* 2 2)\\n  )" "(if (1 < 2)\\r\\n  4\\r\\n  )" "(if (1 < 2)\\r\\n  (* 2 2)\\r\\n  3  )" "(defn abs [x]\\r\\n  (if (< x 0)\\r\\n    (- x)\\r\\n    x))" "(abs -2)" "(defn abs [x]\\r\\n     (if (< x 0)\\r\\n       (- x)\\r\\n       x\\n       (+ x x)))" "(defn abs [x]\\r\\n        (if (< x 0)\\r\\n          ((- x)\\n            (+ x x))\\r\\n          x))" "(abs -3)" "(sumaZajednickihOcena \\"Lisa Rose\\" \\"Toby\\")" "@s1" "@n" "(sumaZajednickihOcena \\"Lisa Rose\\" \\"Toby\\")" "@n" "@s1" "(sumaZajednickihOcena \\"Lisa Rose\\" \\"Toby\\")" "@s1" "@n" "@filmovi" "(sumaZajednickihOcena \\"Lisa Rose\\" \\"Toby\\")" "@n" "@s1" "@s2" "(sumaZajednickihOcena \\"Lisa Rose\\" \\"Toby\\")" "@n" "@s1" "@s2" "(sumaZajednickihOcena \\"Lisa Rose\\" \\"Toby\\")" "@n" "@s1" "@s2" "@sKvadrat1" "@sKvadrat2" "(sumaZajednickihOcena \\"Lisa Rose\\" \\"Toby\\")" "@n" "@sXputaY" "@sKvadrat1" "@sKvadrat2" "@s1" "@s2" "(- (* @n @sumaXputaY) @s1)" "(+ 1 @n)" "(* @n @sumaXputaY)" "@sumaXputaY" "(- (* @n @sXputaY) @s1)" "(- (* @n @sXputaY) (* @s1 @s2))" "(- (* @n @sumaKvadrata1) (Math/pow @s1 2))" "(- (* @n @sKvadrat1) (Math/pow @s1 2))" "\\n(- (* @n @sKvadrat2) (Math/pow @s2 2))" "(Math/sqrt (* (- (* @n @sKvadrat1) (Math/pow @s1 2)) (- (* @n @sKvadrat2) (Math/pow @s2 2))))" "(/ (- (* @n @sXputaY) (* @s1 @s2)) (Math/sqrt (* (- (* @n @sKvadrat1) (Math/pow @s1 2)) (- (* @n @sKvadrat2) (Math/pow @s2 2)))))" "(sumaZajednickihOcena \\"Lisa Rose\\" \\"Toby\\")" "@n" "@sXputaY" "(sumaZajednickihOcena \\"Lisa Rose\\" \\"Toby\\")" "(use 'algoritam.algoritam)" "(euklid \\"Lisa Rose\\" \\"Toby\\")" "(use 'criterium.core)" "(bench (Thread/sleep 1000))" "(time (reduce + (map + (range 1000000) (range 1000000))))" "(time (euklid \\"Lisa Rose\\" \\"Toby\\"))" "(time (sumaZajednickihOcena \\"Lisa Rose\\" \\"Toby\\"))" "(euklid \\"Gene Seymour\\" \\"Michael Phillips\\")" "(sumaZajednickihOcena \\"Lisa Rose\\" \\"Toby\\")" "(euklid \\"Gene Seymour\\" \\"Michael Phillips\\")" "(vrati_sve_osim \\"Toby\\")" "(vrati-The_Night_Listener \\"Toby\\")" "(vrati-Snakes_on_a_Plane \\"Toby\\")" "(vrati_sve_osim)" "(vrati_ime_kolone \\"Toby\\")" "(vrati_sve_osim \\"Toby\\")" "(vrati_sve_osim)" "(vrati_sve_osim \\"Toby\\")" "(vrati_sve_osim)" "(vrati_sve_osim \\"Toby\\")" "(vrati-The_Night_Listener \\"Toby\\")" "(vrati-Snakes_on_a_Plane \\"Toby\\")" "(vrati-The_Night_Listener \\"Lisa Rose\\")" "(vrati_sve_osim \\"Toby\\")" "(get (vrati_sve_osim \\"Toby\\") \:name)" "(get {\:a 1 \:b 2} \:b)" "(vrati_sve_osim \\"Toby\\")" "(get ({\:name \\"Claudia Puig\\"}) \:name)" "(get {\:name \\"Claudia Puig\\"} \:name)" "(vrati_sve_osim \\"Toby\\")" "(vec [1 2 3])" "(map [3 3 3])" "(vrati-The_Night_Listener \\"Lisa Rose\\")" "(vrati_sve_osim \\"Toby\\")" "(vrati-The_Night_Listener \\"Toby\\")" "(vrati-The_Night_Listener \\"Lisa Rose\\")" "(vrati_sve_osim \\"Lisa Rose\\")" "(get (vrati_sve_osim \\"Lisa Rose\\") \\"Toby\\")" "(get (vrati_sve_osim \\"Lisa Rose\\") \:name)" "(contains? (vrati_sve_osim \\"Lisa Rose\\") \\"Toby\\")" "(vrati_sve_osim \\"Lisa Rose\\")" "(contains? (vrati_sve_osim \\"Lisa Rose\\") {\:name \\"Toby\\"})" "(vec (vrati_sve_osim \\"Lisa Rose\\"))" "(map (vrati_sve_osim \\"Lisa Rose\\"))" "(vrati_sve_osim \\"Toby\\")" "(use 'algoritam.models.db)" "(sql/with-connection\\r\\n  db\\r\\n  (sql/with-query-results rows\\r\\n    [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Toby\\" ] (into [] rows)))" "(sql/with-connection\\r\\n     db\\r\\n     (sql/with-query-results rows\\r\\n       [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Toby\\" ] (into {} rows)))" "(sql/with-connection\\r\\n     db\\r\\n     (sql/with-query-results rows\\r\\n       [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Toby\\" ] \:name (into [] rows)))" "(sql/with-connection\\r\\n        db\\r\\n        (get (sql/with-query-results rows\\r\\n          [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Toby\\" ] \:name (into [] rows))))" "(sql/query db-spec [\\"SELECT * FROM film_critics\\"])" "(sql/with-connection\\r\\n  db\\r\\n  (sql/with-query-results rows\\r\\n    [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" Name ] \:row-fn))" "(sql/with-connection\\r\\n  db\\r\\n  (sql/with-query-results rows\\r\\n    [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Lisa Rose\\" ] \:row-fn))" "  (sql/with-connection\\r\\n  db\\r\\n  (sql/with-query-results rows\\r\\n    [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" Name ] (into [] rows)))" "  (sql/with-connection\\r\\n  db\\r\\n  (sql/with-query-results rows\\r\\n    [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Lisa Rose\\" ] (into [] rows)))" "  (sql/with-connection\\r\\n  db\\r\\n  (sql/resultset-seq rows\\r\\n    [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Lisa Rose\\" ] (into [] rows)))" "  (sql/with-connection\\r\\n  db\\r\\n  (sql/with-query-results rows\\r\\n    [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Lisa Rose\\" ] (into [] rows)))" "(get   (sql/with-connection\\r\\n  db\\r\\n  (sql/with-query-results rows\\r\\n    [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Lisa Rose\\" ] (into [] rows))))" "(get   (sql/with-connection\\r\\n  db\\r\\n  (sql/with-query-results rows\\r\\n    [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Lisa Rose\\" ] (into [] rows))) \:name)" "(get   (sql/with-connection\\r\\n  db\\r\\n  (sql/with-query-results rows\\r\\n    [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Lisa Rose\\" ] (into [] rows))) \\"Toby\\")" "(sql/with-connection\\r\\n  db\\r\\n  (sql/with-query-results rows\\r\\n    [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Lisa Rose\\" ] (into [] rows)))" "(sql/with-connection\\r\\n  db\\r\\n  (sql/with-query-results rows\\r\\n    [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Lisa Rose\\" ] \:as-arrays true))" "(sql/with-connection\\r\\n     db\\r\\n     (sql/with-query-results rows\\r\\n       [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Lisa Rose\\" ] \:as-arrays? true))" "(sql/query db [\\"SELECT * FROM film_critics\\"])" "(sql/with-connection\\r\\n     db\\r\\n     (sql/with-query-results rows\\r\\n       [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Lisa Rose\\" ] (into [] rows)))" "(sql/with-connection\\r\\n     db\\r\\n     (sql/with-query-results rows\\r\\n       [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Lisa Rose\\" ] \:name))" "(sql/with-connection\\r\\n     db\\r\\n     (sql/with-query-results rows\\r\\n       [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Lisa Rose\\" ] (into [] rows) \:name))" "(sql/with-connection\\r\\n     db\\r\\n     (sql/with-query-results rows\\r\\n       [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Lisa Rose\\" ] \:row \:name))" "(sql/with-connection\\r\\n     db\\r\\n     (sql/with-query-results rows\\r\\n       [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Lisa Rose\\" ] \:row))" "(sql/with-connection\\r\\n        db\\r\\n        (sql/with-query-results rows\\r\\n          [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Lisa Rose\\" ] (into [] rows)))" "(sql/with-connection\\r\\n           db\\r\\n           (sql/with-query-results rows\\r\\n             [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Lisa Rose\\" ] (doall rows)))" "(sql/with-connection\\r\\n           db\\r\\n           (sql/with-query-results rows\\r\\n             (vec [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Lisa Rose\\" ] (doall rows))))" "(sql/with-connection\\r\\n           db\\r\\n           (sql/with-query-results rows\\r\\n             (vec [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Lisa Rose\\" ]) (doall rows)))" "(sql/with-connection\\r\\n              db\\r\\n              (sql/with-query-results rows\\r\\n                (map [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Lisa Rose\\" ]) (doall rows)))" "(sql/with-connection\\r\\n              db\\r\\n              (sql/with-query-results rows\\r\\n                (vec [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Lisa Rose\\" ] \:name) (doall rows)))" "  (sql/with-connection\\r\\n  db\\r\\n  (sql/with-query-results rows\\r\\n    [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Toby\\" ] (into [] rows)))" "  (sql/with-connection\\r\\n  db\\r\\n  (sql/with-query-results rows\\r\\n    [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Toby\\" ] (dorun (map \#(println %) rows))))" "(get   (sql/with-connection\\r\\n  db\\r\\n  (sql/with-query-results rows\\r\\n    [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Toby\\" ] (dorun (map \#(println %) rows)))) \:name)" "  (sql/with-connection\\r\\n  db\\r\\n  (sql/with-query-results rows\\r\\n    [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Toby\\" ] (dorun (map rows))))" "(sql/with-connection\\r\\n     db\\r\\n     (sql/with-query-results rows\\r\\n       [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Toby\\" ] (dorun (map \#(println %) rows))))" "(sql/with-connection\\r\\n     db\\r\\n     (sql/with-query-results rows\\r\\n       [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Toby\\" ] \\n       (dorun \\n         (map \#(println %) rows)\\n         )))" "(sql/with-connection\\r\\n     db\\r\\n     (sql/with-query-results rows\\r\\n       [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Toby\\" ] (dorun (map \#(println \:name) rows))))" "(loop (sql/with-connection\\r\\n     db\\r\\n     (sql/with-query-results rows\\r\\n       [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Toby\\" ] (dorun (map \#(println %) rows)))) \:name)" "(loop (sql/with-connection\\r\\n  db\\r\\n  (sql/with-query-results rows\\r\\n    [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" Name ] (into [] rows))))" "(sql/with-connection\\r\\n  db\\r\\n  (sql/with-query-results rows\\r\\n    [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" Name ] (into [] rows)))" "(sql/with-connection\\r\\n  db\\r\\n  (sql/with-query-results rows\\r\\n    [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Toby\\" ] (into [] rows)))" "(def staa (sql/with-connection\\r\\n  db\\r\\n  (sql/with-query-results rows\\r\\n    [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" Name ] (into [] rows)))\\n  (list \:name))" "(doseq (sql/with-connection\\r\\n  db\\r\\n  (sql/with-query-results rows\\r\\n    [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" Name ] (into [] rows))))" "(use 'algoritam.models.db)" "(query db\\r\\n       [\\"select Name from film_critics where Id \= ?\\" 1]\\r\\n       \:row-fn \#(str (% \:firstname) \\\\space (% \:lastname))\\r\\n       \:resultset-fn first)" "  (sql/with-connection\\r\\n  db\\r\\n  (sql/with-query-results rows\\r\\n    [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Toby\\" ] (into [] rows)))" "(get   (sql/with-connection\\r\\n  db\\r\\n  (sql/with-query-results rows\\r\\n    [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" Name ] (into [] rows))) 1)" "(get   (sql/with-connection\\r\\n  db\\r\\n  (sql/with-query-results rows\\r\\n    [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Toby\\" ] (into [] rows))) 1)" "(get (get   (sql/with-connection\\r\\n     db\\r\\n     (sql/with-query-results rows\\r\\n       [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Toby\\" ] (into [] rows))) 1) \:name)" "(get (get   (sql/with-connection\\r\\n        db\\r\\n        (sql/with-query-results rows\\r\\n          [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Toby\\" ] (into [] rows))) 2) \:name)" "(get (get   (sql/with-connection\\r\\n        db\\r\\n        (sql/with-query-results rows\\r\\n          [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Toby\\" ] (into [] rows))) 3) \:name)" "(get (get   (sql/with-connection\\r\\n        db\\r\\n        (sql/with-query-results rows\\r\\n          [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Toby\\" ] (into [] rows))) 4) \:name)" "(get (get   (sql/with-connection\\r\\n        db\\r\\n        (sql/with-query-results rows\\r\\n          [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Toby\\" ] (into [] rows))) 5) \:name)" "(get (get   (sql/with-connection\\r\\n        db\\r\\n        (sql/with-query-results rows\\r\\n          [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Toby\\" ] (into [] rows))) 6) \:name)" "(get (get   (sql/with-connection\\r\\n        db\\r\\n        (sql/with-query-results rows\\r\\n          [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" \\"Toby\\" ] (into [] rows))) 7) \:name)" "(defn nadjiOstaleKriticare [Name]\\n  (get (get   (sql/with-connection\\r\\n        db\\r\\n        (sql/with-query-results rows\\r\\n          [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" Name ] (into [] rows))) 1) \:name))" "(nadjiOstaleKriticare \\"Lisa Rose\\")" " (recur (inc i))" "(recur (inc 2))" "(inc 3)" "(for [i (range 10)] (inc i))" "(sql/with-connection\\r\\n  db\\r\\n   (get (sql/with-query-results res\\r\\n    [\\"select count(Id) from film_critics\\" ] (first res)) ))" "(sql/with-connection\\r\\n  db\\r\\n   (sql/with-query-results res\\r\\n    [\\"select The_Night_Listener from film_critics where Name \= ?\\" Name] (first res)) \:the_night_listener)" "(sql/with-connection\\r\\n     db\\r\\n (sql/with-query-results res\\r\\n       [\\"select count(Id) from film_critics\\" ] (first res)) )" "(sql/with-connection\\r\\n        db\\r\\n    (sql/with-query-results res\\r\\n          [\\"select count(Id) from film_critics\\" ] (first res)) \:id )" "(sql/with-connection\\r\\n        db\\r\\n    (sql/with-query-results res\\r\\n          [\\"select count(Id) from film_critics\\" ] (first res)) \:count(id) )" "(sql/with-connection\\r\\n        db\\r\\n    (sql/with-query-results res\\r\\n          [\\"select count(Id) from film_critics\\" ] (first res)))" "(sql/with-connection\\r\\n           db\\r\\n       (get (sql/with-query-results res\\r\\n             [\\"select count(Id) from film_critics\\" ] (first res))) \:id )" "(sql/with-connection\\r\\n           db\\r\\n       (get (sql/with-query-results res\\r\\n             [\\"select count(Id) from film_critics\\" ] (first res)) \:id))" "(sql/with-connection\\r\\n           db\\r\\n       (get (sql/with-query-results res\\r\\n             [\\"select count(Id) from film_critics\\" ] (first res)) \:count(id) ))" "(sql/with-connection\\r\\n           db\\r\\n       (get (sql/with-query-results res\\r\\n             [\\"select count(Id) from film_critics\\" ] (first res)) \:count ))" "(sql/with-connection\\r\\n              db\\r\\n          (get (sql/with-query-results res\\r\\n                [\\"select count(Id) from film_critics\\" ] (first res)) 1))" "(sql/with-connection\\r\\n              db\\r\\n          (get (sql/with-query-results res\\r\\n                [\\"select count(Id) from film_critics\\" ] (first res))))" "(sql/with-connection\\r\\n              db\\r\\n(sql/with-query-results res\\r\\n                [\\"select count(Id) from film_critics\\" ] (first res)))" "(sql/with-connection\\r\\n              db\\r\\n          (get (sql/with-query-results res\\r\\n                [\\"select count(*) from film_critics\\" ] (first res)) \:id))" "(sql/with-connection\\r\\n              db\\r\\n (sql/with-query-results res\\r\\n                [\\"select count(*) from film_critics\\" ] (first res)))" "(get (sql/with-connection\\r\\n              db\\r\\n (sql/with-query-results res\\r\\n                [\\"select count(*) from film_critics\\" ] (first res))) \:\:count(*))" "(get (sql/with-connection\\r\\n                 db\\r\\n    (sql/with-query-results res\\r\\n                   [\\"select count(*) from film_critics\\" ] (first res))) \:count(*))" "(sql/with-connection\\r\\n                 db\\r\\n    (sql/with-query-results res\\r\\n                   [\\"select count(*) from film_critics\\" ] (first res)))" "(sql/with-connection\\r\\n                 db\\r\\n    (get (sql/with-query-results res\\r\\n                   [\\"select count(*) from film_critics\\" ] (first res)) \:count(*)))" "(sql/with-connection\\r\\n                    db\\r\\n       (sql/with-query-results res\\r\\n                      [\\"select count(*) from film_critics\\" ] (first res)))" "(sql/with-connection\\r\\n                    db\\r\\n       (sql/with-query-results res\\r\\n                      [\\"select count (*) from film_critics\\" ] (first res)))" "(sql/with-connection\\r\\n                    db\\r\\n       (sql/with-query-results res\\r\\n                      [\\"select count from film_critics\\" ] (first res)))" "(sql/with-connection\\r\\n                       db\\r\\n          (sql/with-query-results res\\r\\n                         [\\"select count (*) from film_critics\\" ] (first res)))" "(get (sql/with-connection\\r\\n                       db\\r\\n          (sql/with-query-results res\\r\\n                         [\\"select count (*) from film_critics\\" ] (first res))) 7)" "(sql/with-connection\\r\\n                       db\\r\\n          (sql/with-query-results res\\r\\n                         [\\"select count (*) from film_critics\\" ] (first res)))" "(sql/with-connection\\r\\n                       db\\r\\n   (get       (sql/with-query-results res\\r\\n                         [\\"select count(*) as ll from film_critics\\" ] (first res)) \:ll))" "(defn vrati-broj-redova-u-bazi []\\n  (sql/with-connection\\r\\n    db\\r\\n      (get (sql/with-query-results res\\r\\n             [\\"select count(*) as redovi from film_critics\\" ] (first res)) \:redovi)))" "(vrati-broj-redova-u-bazi)" "(for [i (range (vrati-broj-redova-u-bazi))] (inc i))" "(defn nadjiOstaleKriticare [Name]\\n  (for [i (range (vrati-broj-redova-u-bazi))]\\r\\n     (get (get   (sql/with-connection\\r\\n           db\\r\\n           (sql/with-query-results rows\\r\\n             [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" Name ] (into [] rows))) (inc i)) \:name)))" "(nadjiOstaleKriticare \\"Toby\\")" "(nadjiOstaleKriticare \\"Lisa Rose\\")" "(defn nadjiOstaleKriticare [Name]\\r\\n     (for [i (range (vrati-broj-redova-u-bazi))]\\r\\n        (get (get   (sql/with-connection\\r\\n              db\\r\\n              (sql/with-query-results rows\\r\\n                [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" Name ] (into [] rows))) i)) \:name))" "(defn nadjiOstaleKriticare [Name]\\r\\n     (for [i (range (vrati-broj-redova-u-bazi))]\\r\\n        (get (get   (sql/with-connection\\r\\n              db\\r\\n              (sql/with-query-results rows\\r\\n                [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" Name ] (into [] rows))) i) \:name)))" "(nadjiOstaleKriticare \\"Toby\\")" "(nadjiOstaleKriticare \\"Lisa Rose\\")" "(defn nadjiOstaleKriticare [Name]\\r\\n        (for [i (range (- vrati-broj-redova-u-bazi 1))]\\r\\n           (get (get   (sql/with-connection\\r\\n                 db\\r\\n                 (sql/with-query-results rows\\r\\n                   [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" Name ] (into [] rows))) i) \:name)))" "(nadjiOstaleKriticare \\"Toby\\")" "(defn nadjiOstaleKriticare [Name]\\r\\n        (for [i (range (vrati-broj-redova-u-bazi))]\\r\\n           (get (get   (sql/with-connection\\r\\n                 db\\r\\n                 (sql/with-query-results rows\\r\\n                   [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" Name ] (into [] rows))) i) \:name)))" "(vrati-broj-redova-u-bazi)" "(- vrati-broj-redova-u-bazi 1)" "(defn nadjiOstaleKriticare [Name]\\r\\n        (for [i (range (vrati-broj-redova-u-bazi))]\\r\\n           (get (get   (sql/with-connection\\r\\n                 db\\r\\n                 (sql/with-query-results rows\\r\\n                   [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" Name ] (into [] rows))) i) \:name)))" "(nadjiOstaleKriticare \\"Lisa Rose\\")" "(defn vrati-broj-redova-u-bazi []\\r\\n     (sql/with-connection\\r\\n       db\\r\\n         (get (sql/with-query-results res\\r\\n                [\\"select count(*) as redovi from film_critics\\" ] (first res)) \:redovi)))" "(vrati-broj-redova-u-bazi)" "(defn vrati-broj-redova-u-bazi []\\r\\n     (- (sql/with-connection\\r\\n       db\\r\\n         (get (sql/with-query-results res\\r\\n                [\\"select count(*) as redovi from film_critics\\" ] (first res)) \:redovi)) 1))" "(vrati-broj-redova-u-bazi)" "(nadjiOstaleKriticare \\"Toby\\")" "(use 'algoritam.pirs)" "(defn nadjiOstaleKriticare [Name]\\r\\n        (for [i (range (vrati-broj-redova-u-bazi))]\\r\\n           (get (get   (sql/with-connection\\r\\n                 db\\r\\n                 (sql/with-query-results rows\\r\\n                   [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" Name ] (into [] rows))) i) \:name)\\n           (sumaZajednickihOcena Name \:name)\\n           ))" "(defn nadjiOstaleKriticare [Name]\\r\\n           (for [i (range (vrati-broj-redova-u-bazi))]\\r\\n              ((get (get   (sql/with-connection\\r\\n                    db\\r\\n                    (sql/with-query-results rows\\r\\n                      [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" Name ] (into [] rows))) i) \:name)\\r\\n              (sumaZajednickihOcena Name \:name)\\r\\n  (sumaZajednickihOcena Name \:name))))" "(nadjiOstaleKriticare \\"Toby\\")" "(defn nadjiOstaleKriticare [Name]\\r\\n              (for [i (range (vrati-broj-redova-u-bazi))]\\r\\n                 ((get (get   (sql/with-connection\\r\\n                       db\\r\\n                       (sql/with-query-results rows\\r\\n                         [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" Name ] (into [] rows))) i) \:name)\\r\\n                 (sumaZajednickihOcena Name \:name)\\r\\n     (sumaZajednickihOcena Name \:name))))" "(nadjiOstaleKriticare \\"Toby\\")" "(defn nadjiOstaleKriticare [Name]\\r\\n        (for [i (range (vrati-broj-redova-u-bazi))]\\r\\n           (get (get   (sql/with-connection\\r\\n                 db\\r\\n                 (sql/with-query-results rows\\r\\n                   [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" Name ] (into [] rows))) i) \:name)))" "(nadjiOstaleKriticare \\"Lisa Rose\\")" "(for (nadjiOstaleKriticare \\"Lisa Rose\\")\\n  (print \\"Ana\\"))" "(for [i (range 10)] \\n  ((inc i)\\n    (print \\"Ana\\"))\\n  )" "(for [i (range 10)] \\r\\n     ((inc i)\\r\\n       (+ 2 2))\\r\\n     )" "(defn nadjiOstaleKriticare [Name]\\r\\n        (for [i (range (vrati-broj-redova-u-bazi))]\\r\\n           (get (get   (sql/with-connection\\r\\n                 db\\r\\n                 (sql/with-query-results rows\\r\\n                   [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" Name ] (into [] rows))) i) \:name)))" "(nadjiOstaleKriticare \\"Toby\\")" "(defn nekaTamo [i]\\n  (+ i i))" "(nekaTamo 23)" "(defn nekaTamo2 [i]\\r\\n     (* i i))" "(for [i (range 10)] \\n  (nekaTamo i)\\n  (nekaTamo2 i)\\n  )" "(defn nekaTamo3 [i]\\r\\n        (nekaTamo i)\\n        (nekaTamo2 i))" "(nekaTamo3 2)" "(nekaTamo3 5)" "(for [i (range 10)] (nekaTamo3 i))" "(defn vratiIzBaze [Name i]\\n  (get (get   (sql/with-connection\\r\\n                 db\\r\\n                 (sql/with-query-results rows\\r\\n                   [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" Name ] (into [] rows))) i) \:name))" "(vratiIzBaze \\"Toby\\" 1)" "(vratiIzBaze \\"Lisa Rose\\" 1)" "(vratiIzBaze \\"Lisa Rose\\" 5)" "(use 'algoritam.pirs)" "(sumaZajednickihOcena \\"Toby\\" (vratiIzBaze \\"Toby\\" 1))" "(sumaZajednickihOcena \\"Toby\\" (vratiIzBaze \\"Toby\\" 3))" "(sumaZajednickihOcena \\"Toby\\" (vratiIzBaze \\"Toby\\" 5))" "(sumaZajednickihOcena \\"Toby\\" (vratiIzBaze \\"Toby\\" 6))" "(sumaZajednickihOcena \\"Toby\\" (vratiIzBaze \\"Toby\\" 7))" "(sumaZajednickihOcena \\"Toby\\" (vratiIzBaze \\"Toby\\" 1))" "(sumaZajednickihOcena \\"Toby\\" (vratiIzBaze \\"Toby\\" 5))" "(for [i (range vrati-broj-redova-u-bazi)] \\n  (sumaZajednickihOcena \\"Toby\\" (vratiIzBaze \\"Toby\\" i)))" "(vrati-broj-redova-u-bazi)" "(for [i (range vrati-broj-redova-u-bazi)] \\n  (i)\\n  )" "(def m1 (atom {\:a \\"A\\" \:b \\"B\\"}))" "m1" "@m1" "(swap\! m1 assoc \:c \\"C\\")" "(def aa (atom {}))" "@aa" "(defn nadjiOstaleKriticare [Name]\\r\\n        (for [i (range (vrati-broj-redova-u-bazi))]\\r\\n          (get (get   (sql/with-connection\\r\\n                 db\\r\\n                 (sql/with-query-results rows\\r\\n                   [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" Name ] (into [] rows))) i) \:name)))" "(nadjiOstaleKriticare \\"Toby\\")" "(swap\! aa assoc \\"D\\" )" "(swap\! aa assoc \: c \\"D\\")" "(swap\! aa assoc \:c \\"D\\" \\n       )" "(use 'algoritam.models.db)" "(nadjiOstaleKriticare \\"Toby\\")" "(def vrednosti (atom {}))" "(defn nadjiOstaleKriticare [Name]\\r\\n        (for [i (range (vrati-broj-redova-u-bazi))]\\r\\n          (swap\! vrednosti assoc \:(get (get   (sql/with-connection\\r\\n                 db\\r\\n                 (sql/with-query-results rows\\r\\n                   [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" Name ] (into [] rows))) i) \:name) \\r\\n                 (sumaZajednickihOcena Name \:name)\\r\\n                 )))" "(defn nadjiOstaleKriticare [Name]\\r\\n        (for [i (range (vrati-broj-redova-u-bazi))]\\r\\n          (swap\! vrednosti assoc \:a (get (get   (sql/with-connection\\r\\n                 db\\r\\n                 (sql/with-query-results rows\\r\\n                   [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" Name ] (into [] rows))) i) \:name) \\r\\n                 )))" "(defn nadjiOstaleKriticare1 [Name]\\r\\n           (for [i (range (vrati-broj-redova-u-bazi))]\\r\\n             (swap\! vrednosti assoc \:a (get (get   (sql/with-connection\\r\\n                    db\\r\\n                    (sql/with-query-results rows\\r\\n                      [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" Name ] (into [] rows))) i) \:name) \\r\\n                    )))" "(defn nadjiOstaleKriticare [Name]\\r\\n        (for [i (range (vrati-broj-redova-u-bazi))]\\r\\n          (get (get   (sql/with-connection\\r\\n                 db\\r\\n                 (sql/with-query-results rows\\r\\n                   [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" Name ] (into [] rows))) i) \:name)))" "(defn nadjiOstaleKritic [Name]\\r\\n        (for [i (range (vrati-broj-redova-u-bazi))]\\r\\n          (get (get   (sql/with-connection\\r\\n                 db\\r\\n                 (sql/with-query-results rows\\r\\n                   [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" Name ] (into [] rows))) i) \:name)))" "(use 'algoritam.models.db)" "(defn nadjiOstaleKriticare [Name]\\r\\n        (for [i (range (vrati-broj-redova-u-bazi))]\\r\\n          (get (get   (sql/with-connection\\r\\n                 db\\r\\n                 (sql/with-query-results rows\\r\\n                   [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" Name ] (into [] rows))) i) \:name)))" "(defn nadjiOstaleKritie [Name]\\r\\n        (for [i (range (vrati-broj-redova-u-bazi))]\\r\\n          (get (get   (sql/with-connection\\r\\n                 db\\r\\n                 (sql/with-query-results rows\\r\\n                   [\\"select Name from film_critics except select Name from film_critics where Name \= ?\\" Name ] (into [] rows))) i) \:name)))" "(OOO \\"Toby\\" 1)" "(nadjiOstaleKriticareOVOO \\"Toby\\")" "(def vrednosti (atom {}))" "(swap\! vrednosti assoc \\"An\\" 2)" "(nadjiOstaleKriticareOVOO \\"Toby\\")" "(def vrednosti (atom {}))" "(def x (atom 0))" "(swap\! x 10)" "(def x (atom 20))" "@x" "(defn x2 []\\n  (+ 2 2))" "(x2)" "(swap\! vrednosti \\"\u00E4na\\" \\"aa\\")" "(swap\! vrednosti \\"\u00E4na\\" 3)" "(swap\! vrednosti assoc \\"Ana\\" \\"a\\")" "(swap\! vrednosti assoc \\"Ana\\" x2)" "x2" "(swap\! vrednosti assoc \\"Ana\\" (x2)\\n       )" "(swap\! vrednosti assoc \\"Ana\\" @x)" "(nadjiOstaleKriticareOVOO \\"Toby\\")" "(pirson)" "(sumaZajednickihOcena \\"Toby\\" \\"Lisa Rose\\")" "(nadjiOstaleKriticareOVOO \\"Toby\\")" "(swap\! vrednosti assoc \\"An\\" 3.5)" "(nadjiOstaleKriticareOVOO \\"Toby\\"\\n                          )" "(nadjiOstaleKriticareOVOO \\"Toby\\")" "(def s (atom 3))" "@s" "(double s)" "(double @s)" "(nadjiOstaleKriticareOVOO \\"Toby\\")" "(max (nadjiOstaleKriticareOVOO \\"Toby\\"))" "(app max (nadjiOstaleKriticareOVOO \\"Toby\\"))" "(apply max (nadjiOstaleKriticareOVOO \\"Toby\\"))" "(key (apply max-key val {\:a 3 \:b 7 \:c 9}))" "(nadjiOstaleKriticareOVOO \\"Toby\\")" "{a 1}" "{\:a 1}" "{\:b 1}" "{\\"aa\\" 2}" "{\\"dew\\" 3.3}" "(nadjiOstaleKriticareOVOO \\"Toby\\"\\n                          )" "(key (apply max-key val (nadjiOstaleKriticareOVOO \\"Toby\\")))" "(max-key (nadjiOstaleKriticareOVOO \\"Toby\\"))" "(nadjiOstaleKriticareOVOO \\"Toby\\")" "(key (apply max-key val (nadjiOstaleKriticareOVOO \\"Toby\\")))" "(key (apply max-key val (get (nadjiOstaleKriticareOVOO \\"Toby\\") 6)))" "(key (apply max-key val {\\"Mick LaSalle\\" 0.551250073437465,\\r\\n  \\"Michael Phillips\\"\\r\\n  0.47490063172189667,\\r\\n  \\"Lisa Rose\\" 0.5726633513273645,\\r\\n  \\"Jack Matthews\\" 0.5545792454959739,\\r\\n  \\"Gene Seymour\\" 0.5545792454959739,\\r\\n  \\"Claudia Puig\\" 0.8934051474415642}))" "(key (apply max-key val @vrednosti))" "(nadjiOstaleKriticareOVOO \\"Toby\\")" "(key (apply max-key val @vrednosti))" "(nadjiOstaleKriticareOVOO \\"Toby\\")" "(bilosta)" "(nadjiOstaleKriticareOVOO \\"Lisa Rose\\")" "(bilosta)" "(nadjiOstaleKriticareOVOO \\"Michael Phillips\\")" "(bilosta)" "(euklid \\"Toby\\" \\"Lisa Rose\\")" "(euklid \\"Lisa Rose\\" \\"Toby\\")" "(nadjiOstaleKriticareOVOO1 \\"Toby\\")" "(key (apply max-key val @vrednosti))" "(nadjiOstaleKriticareOVOO1 \\"Lisa Rose\\")" "(key (apply max-key val @vrednosti))" "(nadjiOstaleKriticareOVOO1 \\"Claudia Puig\\")" "(key (apply max-key val @vrednosti))" "(nadjiOstaleKriticareOVOO1 \\"Jack Matthews\\")" "(key (apply max-key val @vrednosti))"]
eclipse.preferences.version=1
